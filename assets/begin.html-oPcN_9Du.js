import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as i}from"./app-CuRfWJHb.js";const s={};function o(r,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h2 id="basic-concepts" tabindex="-1"><a class="header-anchor" href="#basic-concepts"><span>Basic Concepts</span></a></h2><p>Before formally learning <code>Kether</code>, we need to understand some of its basic concepts.</p><p>It is a scripting language based on statements, each statement has its own parameters, and each line is a statement.</p><p>Therefore, you will find the statements provided by various plugins in their documentation, and through those statements, you can achieve the corresponding functions of the plugin.</p><p>Additionally, <code>Kether</code> is divided into <strong>public statements</strong> and <strong>private statements</strong>. Public statements mean you can use them in any plugin that supports <code>Kether</code>, while private statements mean you can only use them in the plugin that provides these statements, as they are generally closely related to the plugin&#39;s functionality.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><p>Let&#39;s take the entry unlock reward script of <code>YuIllustration</code> as an example to understand the syntax of <code>Kether</code>.</p><p>The default configuration is as follows:</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">reward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # kether script</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|-</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    command inline &quot;give {{ sender }} diamond 1&quot; as op</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    tell color inline &quot;&amp;aYou have unlocked an entry named &amp;e{{ &amp;entry }}&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="analysis" tabindex="-1"><a class="header-anchor" href="#analysis"><span>Analysis</span></a></h3><p>The content under the <code>content</code> key is the Kether script triggered after unlocking an entry.<br> The example configuration contains two Kether statements, <code>command</code> and <code>tell</code>.<br> Let&#39;s analyze these two statements in detail:</p><h4 id="command" tabindex="-1"><a class="header-anchor" href="#command"><span>command</span></a></h4><div class="language-kether line-numbers-mode" data-highlighter="shiki" data-ext="kether" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>command inline &quot;give {{ sender }} diamond 1&quot; as op</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For this statement, <code>command</code> is the statement name, representing the execution of a command, which is a built-in statement of <code>TabooLib</code>. <code>inline</code> is an inline statement used to parse parameters such as <strong>player name</strong>, and <code>as op</code> is an additional parameter of the statement, representing the identity executing the command. It provides three identities by default: <code>op</code>, <code>member</code>, <code>player</code>, representing administrator, member, and player, respectively. If not specified, it defaults to player.</p><p>So, <code>inline &quot;give {{ sender }} diamond 1&quot; as op</code> is the parameter of the <code>command</code> statement.</p><p>In addition to built-in variables, <code>Kether</code> also supports parsing <strong>any PAPI variable</strong>, used as follows:</p><div class="language-kether line-numbers-mode" data-highlighter="shiki" data-ext="kether" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>command inline &quot;give {{ papi %player_name% }} diamond 1&quot; as op</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="tell" tabindex="-1"><a class="header-anchor" href="#tell"><span>tell</span></a></h4><div class="language-kether line-numbers-mode" data-highlighter="shiki" data-ext="kether" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>tell color inline &quot;&amp;aYou have unlocked an entry named &amp;e{{ &amp;entry }}&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For this statement, <code>tell</code> is the statement name, representing sending a message. <code>color</code> is a color conversion statement that can convert color codes like <code>&amp;a</code> into color characters. <code>inline</code> is still an inline statement used to parse parameters such as <strong>entry name</strong>.</p><p>However, <code>color</code> can only convert color codes into color characters and does <strong>not have</strong> the function of outputting, so <code>tell</code> is used for output. Therefore, the entire line <code>color inline &quot;&amp;aYou have unlocked an entry named &amp;e{{ &amp;entry }}&quot;</code> is the parameter of <code>tell</code>.</p><hr><h4 id="inline" tabindex="-1"><a class="header-anchor" href="#inline"><span>inline</span></a></h4><p>The function of the <code>inline</code> statement is only to return the corresponding variable for actions wrapped in <code>{{ }}</code> within the text. Therefore, <code>{{ sender }}</code> will be parsed as the player name executing the command.</p>`,25)]))}const c=t(s,[["render",o]]),h=JSON.parse('{"path":"/general/kether/begin.html","title":"Getting Started","lang":"en-US","frontmatter":{"title":"Getting Started","order":1,"description":"Basic Concepts Before formally learning Kether, we need to understand some of its basic concepts. It is a scripting language based on statements, each statement has its own para...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Getting Started\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-22T23:37:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"L1An\\",\\"url\\":\\"https://github.com/l1-an\\"}]}"],["meta",{"property":"og:url","content":"https://docs.yuseries.org/general/kether/begin.html"}],["meta",{"property":"og:site_name","content":"YuSeries Docs"}],["meta",{"property":"og:title","content":"Getting Started"}],["meta",{"property":"og:description","content":"Basic Concepts Before formally learning Kether, we need to understand some of its basic concepts. It is a scripting language based on statements, each statement has its own para..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-TW"}],["meta",{"property":"og:updated_time","content":"2024-12-22T23:37:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-22T23:37:51.000Z"}],["link",{"rel":"alternate","hreflang":"zh-tw","href":"https://docs.yuseries.org/zh-TW/general/kether/begin.html"}]]},"git":{"createdTime":1734910671000,"updatedTime":1734910671000,"contributors":[{"name":"L1-An","username":"L1-An","email":"shiyu46@icloud.com","commits":1,"url":"https://github.com/L1-An"}]},"readingTime":{"minutes":1.54,"words":461},"filePathRelative":"general/kether/begin.md","autoDesc":true,"excerpt":"<h2>Basic Concepts</h2>\\n<p>Before formally learning <code>Kether</code>, we need to understand some of its basic concepts.</p>\\n<p>It is a scripting language based on statements, each statement has its own parameters, and each line is a statement.</p>\\n<p>Therefore, you will find the statements provided by various plugins in their documentation, and through those statements, you can achieve the corresponding functions of the plugin.</p>"}');export{c as comp,h as data};
